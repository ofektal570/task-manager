{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let TasksService = /*#__PURE__*/(() => {\n  class TasksService {\n    constructor() {\n      this.activeTasks = [];\n      this.deletedTasks = [];\n      this.activeTasksUpdated = new Subject();\n      this.deletedTasksUpdated = new Subject();\n    }\n\n    addTask(newTask) {\n      this.activeTasks.push(newTask);\n      this.updateActiveTasksListeners();\n    }\n\n    deleteTask(deletedTask) {\n      this.activeTasks = this.activeTasks.filter(task => task !== deletedTask);\n      this.updateActiveTasksListeners();\n      this.deletedTasks.push(deletedTask);\n      this.updateDeletedTasksListeners();\n    }\n\n    activateTask(activateTask) {\n      this.deletedTasks = this.deletedTasks.filter(task => task !== activateTask);\n      this.activeTasks.push(activateTask);\n      this.updateActiveTasksListeners();\n      this.updateDeletedTasksListeners();\n    }\n\n    updateNameTask(task, newName) {\n      const idx = this.activeTasks.indexOf(task);\n      this.activeTasks[idx].name = newName;\n      this.updateActiveTasksListeners();\n    }\n\n    deleteTaskDeleted(deletedTask) {\n      this.deletedTasks = this.deletedTasks.filter(task => task !== deletedTask);\n      this.updateDeletedTasksListeners();\n    } // deleteTaskFromList(deletedTask: Task, oldList: Task[], newList: Task[]) {\n    //   oldList = oldList.filter((task: Task) => task !== deletedTask);\n    //   console.log('im in delete task service ', oldList, newList);\n    //   this.updateActiveTasksListeners();\n    //   newList.push(deletedTask);\n    //   this.updateDeletedTasksListeners();\n    // }\n\n\n    getActiveTasks() {\n      return [...this.activeTasks];\n    }\n\n    getDeletedTasks() {\n      return [...this.deletedTasks];\n    }\n\n    getActiveTasksUpdateListener() {\n      return this.activeTasksUpdated.asObservable();\n    }\n\n    getDeletedTasksUpdateListener() {\n      return this.deletedTasksUpdated.asObservable();\n    }\n\n    updateActiveTasksListeners() {\n      this.activeTasksUpdated.next([...this.activeTasks]);\n    }\n\n    updateDeletedTasksListeners() {\n      this.deletedTasksUpdated.next([...this.deletedTasks]);\n    }\n\n  }\n\n  TasksService.ɵfac = function TasksService_Factory(t) {\n    return new (t || TasksService)();\n  };\n\n  TasksService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TasksService,\n    factory: TasksService.ɵfac,\n    providedIn: 'root'\n  });\n  return TasksService;\n})();","map":null,"metadata":{},"sourceType":"module"}